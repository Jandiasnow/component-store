/**
 * 由 src/kubernetes/gen/index.ts 自动生成
 * !!! 请不要修改 !!!
 */
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Repository is the Schema for the repositories API
 */
export interface Repository {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * RepositorySpec defines the desired state of Repository
   */
  spec?: {
    /**
     * AuthSecret if the chart repository requires auth authentication, set the username and password to secret, with the fields user and password respectively.
     */
    authSecret?: string;
    filter?: {
      /**
       * If True, the current version will be retained even if it is deprecated.
       */
      deprecated?: boolean;
      /**
       * Name of the component
       */
      name?: string;
      /**
       * default is keep
       */
      operation?: 'keep' | 'ignore';
      /**
       * VersionedFilterCond filters which version in component are pulled/ignored from the repository
       */
      versionedFilterCond?: {
        /**
         * Filter version by regexp
         */
        regexp?: string;
        /**
         * VersionConstraint Support for user-defined version ranges, etc. Refer to the documentation for more details https://github.com/Masterminds/semver#semver
         */
        versionConstraint?: string;
        /**
         * Accurately match each item in the versions
         */
        versions?: string[];
        [k: string]: any;
      };
      [k: string]: any;
    }[];
    insecure?: boolean;
    /**
     * PullStategy pullStategy for this repository
     */
    pullStategy?: {
      /**
       * Interval for pulling
       */
      intervalSeconds?: number;
      /**
       * Retry upon timeout
       */
      retry?: number;
      /**
       * Timeout for pulling
       */
      timeoutSeconds?: number;
      [k: string]: any;
    };
    repositoryType?: string;
    /**
     * URL chart repository address
     */
    url: string;
    [k: string]: any;
  };
  /**
   * RepositoryStatus defines the observed state of Repository
   */
  status?: {
    /**
     * Conditions of the resource.
     */
    conditions?: {
      /**
       * LastTransitionTime is the last time this condition transitioned from one status to another.
       */
      lastTransitionTime: string;
      /**
       * A Message containing details about this condition's last transition from one status to another, if any.
       */
      message?: string;
      /**
       * A Reason for this condition's last transition from one status to another.
       */
      reason: string;
      /**
       * Status of this condition; is it currently True, False, or Unknown
       */
      status: string;
      /**
       * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
       */
      type: string;
      [k: string]: any;
    }[];
    /**
     * URLHistory URL change history
     */
    urlHistory?: string[];
    [k: string]: any;
  };
  [k: string]: any;
}
